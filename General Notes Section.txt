General Notes Section

Loop Invariant :	a predicate (predicate - a sentence with some variable and when specific values are inserted in the var's place, 
					we get a statement) that is true at the start and the end of every iteration of the loop.

					Used to show the correctness of an algorithm. Three things need to be shown about a loop invariant :

					1. Initialization : the invariant is true before the first iteration of the loop
					2. Maintenance : It is true before every iteration of the loop (this means that it is also true after every iteration)
					3. Termination : When the loop terminates, the invariant gives us an useful property that helps show the correctness
									 of the algorithm


Analysis of Algorithm Efficiency 

Definition : let f and g be a real-valued functions on the same domain of nonnegative real numbers.

a) 	f is of order at least g, written f(x) is Omega(g(x)), if and only if, there exists a positive real number A and a nonnegative real number a
	such that :

		A|g(x)| <= |f(x)| , for all real numbers x > a

b) 	f is of order at most g, written f(x) is O(g(x)), if, and only if, there exists a positive real number B and a nonnegative real number b
	such that : 

		B|g(x)| >= |f(x)| , for all real numbers x > b

c) 	f is of order g, written f(x) is Theta(g(x)), if, and only if, there exist a positive real numbers A, B and a nonnegative real number c
	such that :

		A|g(x)| <= |f(x)| <= B|g(x)| , for all real numbers x > c